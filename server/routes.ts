import { Request, Response } from "express"
import { challenges } from "./challenges"
import { forumService, userService } from "./services"

type routeType = { method: "get" | "post", path: string, callback: (req: Request, res: Response) => Promise<void> | void }

export { routes }

const flagRoutes: Array<routeType> = Object.keys(challenges)
    .map((challengeName) => ({
        method: "get",
        path: `/${challengeName}`,
        callback: (req, res) => {
            if (req.query["flag"] === challenges[challengeName].flag) {
                res.send("YOUPI")
            } else {
                res.status(400);
                res.send("WRONG")
            }
        }
    }))

const routes: Array<routeType> = [
    {
        method: "get",
        path: "/challenge1-endpoint", callback: (_, res) => {
            res.send(challenges["challenge1"].flag)
        }
    },
    {
        method: "get",
        path: "/challenge2-admin-cookie", callback: (_, res) => {
            res.send(challenges["challenge2"].flag)
        }
    },
    {
        method: "post",
        path: "/messages", callback: async (req, res) => {
            const message = req.body.message;
            if (message) {
                const messages = await forumService.addMessage(message);
                res.status(201)
                res.send(messages);
            } else {
                res.status(400)
                res.send("Le message n'a pas été posté.")
            }
        }
    },
    {
        method: "get",
        path: "/messages", callback: async (req, res) => {
            const messages = await forumService.fetchMessages()
            res.send(messages)
        }
    },
    {
        method: "get",
        path: "/users/:id", callback: async (req, res) => {
            const id = req.params.id;
            const user = await userService.getUserById(id);
            res.send(user);
        }
    },
    {
        method: "get",
        path: "/users", callback: async (req, res) => {
            const user = await userService.getUsers();
            res.send(user);
        }
    },
    {
        method: "get",
        path: "/users/:id", callback: async (req, res) => {
            const id = req.params.id
            const user = await userService.getUserById(id);
            res.send(user);
        }
    },
    ...flagRoutes
]

