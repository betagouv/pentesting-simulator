import { Request, Response } from "express"
import bcrypt from "bcryptjs"
import { forumService, characterService, flagService } from "./services"

type routeType = { method: "get" | "post", path: string, callback: (req: Request, res: Response) => Promise<void> | void }

export { routes }

const routes: Array<routeType> = [
    {
        method: "get",
        path: "/challengeForm1/flag", callback: async (req, res) => {
            const flag = await flagService.getFlag("challengeForm1")
            res.send(flag)
            return;
        }
    },
    {
        method: "get",
        path: "/challengeForm2-endpoint/:phrase", callback: async (req, res) => {
            if (req.params.phrase === "Un chasseur sachant chasser sans son chien est un sacré chasseur") {
                const flag = await flagService.getFlag("challengeForm2")
                res.send(flag)
                return;
            } else {
                res.sendStatus(400)
            }
        }
    },
    {
        method: "get",
        path: "/challengeXSS1-admin-cookie", callback: async (req, res) => {
            const { userName, password } = req.query;
            if (!password || typeof password !== "string") {
                res.sendStatus(400);
                return;
            }
            if (userName === "admin" && bcrypt.compareSync(password, "$2a$04$kP5Oz0bCa/IxBDSHiQ72TOtkgpAaPiB/bN1OIxfhD7/3vmmYjmZmS")) {
                const flag = await flagService.getFlag("challengeXSS1")
                res.send(flag)

            } else {
                res.sendStatus(403);
            }
        }
    },
    {
        method: "post",
        path: "/messages", callback: async (req, res) => {
            const message = req.body.message;
            if (message) {
                const messages = await forumService.addMessage(message);
                res.status(201)
                res.send(messages);
            } else {
                res.status(400)
                res.send("Le message n'a pas été posté.")
            }
        }
    },
    {
        method: "get",
        path: "/messages/:userName", callback: async (req, res) => {
            const userName = req.params.userName;
            if (typeof userName !== "string") {
                res.sendStatus(400)
                return;
            }
            let messages = [];
            if (userName === 'admin') {
                messages = await forumService.fetchAllMessages();
            } else {
                messages = await forumService.fetchMessagesByUserName(userName)
            }
            res.send(messages)
        }
    },
    {
        method: "get",
        path: "/characters/:id", callback: async (req, res) => {
            const id = req.params.id;
            const character = await characterService.getCharacterById(id);
            res.send(character);
        }
    },
    {
        method: "get",
        path: "/characters", callback: async (req, res) => {
            const character = await characterService.getCharacters();
            res.send(character);
        }
    },
    {
        method: "get",
        path: "/characters/:id", callback: async (req, res) => {
            const id = req.params.id
            const character = await characterService.getCharacterById(id);
            res.send(character);
        }
    },
    {
        method: "post",
        path: `/flags/guess`,
        callback: async (req, res) => {
            const { challengeName, flag } = req.body;
            const actualFlag = await flagService.getFlag(challengeName);
            if (actualFlag === flag) {
                res.send(true)
            } else {
                res.status(400);
                res.send(false)
            }
        }
    }]

