import React, { ChangeEvent, useState } from 'react';
import { Badge, Button, Col, Container, Row, TextInput } from '@dataesr/react-dsfr'
import { submitFlag } from '../api';
import { challengeNameType, challenges } from '../challenges'
import { Link, Header } from '../components';
import { storage } from '../services';

const INITIAL_FLAGS = challenges.reduce((acc, challenge) => ({ ...acc, [challenge.name]: "" }), {} as Record<challengeNameType, string>)

function ChallengeList() {
  const [flags, setFlags] = useState(INITIAL_FLAGS);
  const userName = storage.user.getUserName();
  const initialFoundFlags = challenges.reduce((acc, challenge) => (
    { ...acc, [challenge.name]: storage.challenges.getIsFlagFound({ challengeName: challenge.name, userName }) }
  )
    , {} as Record<challengeNameType, boolean>)
  const [foundFlags, setFoundFlags] = useState(initialFoundFlags)

  return (
    <>
      <Header />
      <Container spacing="m-5w">
        {challenges.map(({ name, path }) => {
          const isFlagFound = foundFlags[name];
          return (
            <Row spacing='m-1w' key={name}>
              <Col>
                <Link to={path} text={"Accéder au " + name} />
              </Col>
              <Col>
                <TextInput disabled={isFlagFound} placeholder={isFlagFound ? "" : "Insérer le drapeau ici..."} name={name} value={flags[name || ""]} onChange={buildOnChange(name)} />
              </Col>
              <Col>
                <Button onClick={buildOnSubmitFlag(name)} disabled={isFlagFound}>Soumettre le drapeau</Button>
              </Col>
              <Col>{isFlagFound && <Badge text="Trouvé !" type="success" />}</Col>
            </Row>)
        })}
      </Container>
    </>
  );

  function buildOnChange(challengeName: challengeNameType) {
    return (e: ChangeEvent<HTMLInputElement>) => {
      const value = e.target.value;
      changeChallengeName(challengeName, value);
    }
  }

  function changeChallengeName(challengeName: challengeNameType, value: string) {
    setFlags({ ...flags, [challengeName]: value })

  }

  function buildOnSubmitFlag(challengeName: challengeNameType) {
    return async () => {
      const response = await submitFlag(challengeName, flags[challengeName])
      changeChallengeName(challengeName, "")
      if (!!response.data) {
        storage.challenges.setIsFlagFound({ userName, challengeName }, true)
        setFoundFlags({ ...foundFlags, [challengeName]: true })
      }
      alert(!!response.data ? "Félicitations !" : "Mauvais drapeau... Essayez encore !");

    }
  }
}

export { ChallengeList };
