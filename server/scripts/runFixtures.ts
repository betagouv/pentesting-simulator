import md5 from "md5";
import { client } from "../database"
import { characters, words } from "../fixtures"
import { stringFormatter } from "../utils";

runScript()

async function runScript() {
    client.connect();

    await runFixtures()

    client.end()
}

async function runFixtures() {
    await insertFlags();
    await insertCharacters();
}

async function insertCharacters() {
    await client.query(`TRUNCATE TABLE "characters"`);
    const challengeSqlInjectionFlags = (await client.query(`SELECT value FROM flags WHERE "challengeName"='challengeSQLInjection1'`)).rows;
    if (challengeSqlInjectionFlags.length !== 1) {
        throw new Error(`Error while fetching flag for challengeName "challengeSqlInjection"`);
    }
    const challengeSqlInjectionFlag = challengeSqlInjectionFlags[0].value;

    return client.query(`INSERT INTO characters (name, hashedPassword, "creationDate") VALUES ${characters.map(character => `('${character}', '${character === "Bernard Lermite"
        ? challengeSqlInjectionFlag
        : md5(
            Math.floor(Math.random() * 99999).toString()
        )
        }', now())`).join(",")};`)
}

async function insertFlags() {
    await client.query(`TRUNCATE TABLE "flags"`);
    const flagForm1 = { challengeName: "challengeForm1", value: computeRandomFlagValue(3) }
    const flagForm2 = { challengeName: "challengeForm2", value: computeRandomFlagValue(3) }
    const flagLowEncryption1 = { challengeName: "challengeLowEncryption1", value: computeRandomFlagValue(1) }
    const flagSQLInjection1 = { challengeName: "challengeSQLInjection1", value: md5(flagLowEncryption1.value) }
    const flagXSS = { challengeName: "challengeXSS1", value: computeRandomFlagValue(3) }

    const computedFlags = [flagForm1, flagForm2, flagSQLInjection1, flagLowEncryption1, flagXSS]

    return client.query(`INSERT INTO flags ("challengeName", "value") VALUES ${computedFlags.map(computedFlag => `('${computedFlag.challengeName}', '${computedFlag.value}')`).join(",")};`)
}

function computeRandomFlagValue(wordCount: number) {
    const numberOfWords = words.length;

    const computedWords = " ".repeat(wordCount).split("").map(() => { const index = Math.floor(Math.random() * numberOfWords); return words[index] })

    const computedFlag = computedWords.reduce((acc, computedWord, index) => index === 0 ? computedWord : acc + stringFormatter.capitalize(computedWord), "")
    return computedFlag
}


