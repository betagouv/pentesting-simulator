import md5 from "md5";
import { client } from "../database"
import { characters, flags } from "../fixtures"
import { stringFormatter } from "../utils";

runScript()

async function runScript() {
    client.connect();

    await runFixtures()

    client.end()
}

async function runFixtures() {
    await insertFlags();
    await insertCharacters();
}

async function insertCharacters() {
    await client.query(`TRUNCATE TABLE "characters"`);
    const challenge3Flags = (await client.query(`SELECT flag FROM flags WHERE "challengeName"='challenge3'`)).rows;
    if (challenge3Flags.length !== 1) {
        throw new Error(`Error while fetching flag for challengeName "challenge3"`);
    }
    const challenge3Flag = challenge3Flags[0].flag;

    return client.query(`INSERT INTO characters (name, hashedPassword, "creationDate") VALUES ${characters.map(character => `('${character}', '${character === "Bernard Lermite"
        ? challenge3Flag
        : md5(
            Math.floor(Math.random() * 99999).toString()
        )
        }', now())`).join(",")};`)
}

async function insertFlags() {
    await client.query(`TRUNCATE TABLE "flags"`);
    let numberOfWords = flags.length;
    const computedFlags: string[] = [];

    for (let i = 0; i < 2; i++) {
        const computedWords = ["", "", ""].map(() => { const index = Math.floor(Math.random() * numberOfWords); return flags[index] })
        const computedFlag = computedWords[0] + stringFormatter.capitalize(computedWords[1]) + stringFormatter.capitalize(computedWords[2])
        computedFlags.push(computedFlag)
    }
    const challenge4Flag = flags[Math.floor(Math.random() * numberOfWords)]
    computedFlags.push(md5(challenge4Flag))
    computedFlags.push(challenge4Flag);

    return client.query(`INSERT INTO flags ("challengeName", "flag") VALUES ${computedFlags.map((computedFlag, index) => `('challenge${index + 1}', '${computedFlag}')`).join(",")};`)
}


