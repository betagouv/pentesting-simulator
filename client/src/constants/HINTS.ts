import { challengeNameType } from "../challenges"

export { HINTS }

const HINTS: Record<challengeNameType, string[]> = {
    challengeForm1: ["La valeur du mot de passe est bel et bien stockée dans le DOM, c'est le navigateur qui interprète le type de l'input et choisit de la cacher. Heureusement, il vous est possible de modifier directement le DOM."],
    challengeForm2: [
        "De toute évidence, vous ne pouvez pas soumettre cette phrase via le formulaire dans le navigateur. Analysez ce que fait l'application et à quel niveau se fait le bloquage, pour passer outre.",
        "Le contrôle de l'input utilisateur s'effectue uniquement au niveau du formulaire. Changer le type de l'input ne suffit malheureusement pas : il vous faut examiner la requête sortante.",
    ],
    challengeXSS1: [
        "Il s'agit ici d'exploiter une faille XSS. Dans un premier temps, essayez d'insérer toutes sortes de balises pour savoir comment l'exploiter.",
        "Je vous conseille d'exploiter la balise <iframe /> pour insérer du Javascript. Tentez dans un premier temps d'afficher les cookies présents dans votre propre navigateur via la fonction alert.",
        "En Javascript, il vous faut maintenant trouver le moyen d'envoyer des cookies présent sur le navigateur à une adresse externe. Les restrictions CORS empêchent de le faire directement (par exemple en faisant un fetch en Javascript). Il vous faut trouver le moyen de faire un appel de manière indirecte.",
        "Une solution peut être d'insérer en Javascript un élément HTML, par exemple une image, dont l'URL pointerait vers une adresse que vous maîtrisez. Il vous suffira alors de passer les cookies dans l'URL pour que quiconque consulte votre page se voie voler ses cookies.",
        "Un site comme https://requestbin.com/ vous permet de collecter les requêtes effectuées. Le cookie de l'admin dont vous souhaitez la valeur est ADMIN_COOKIE."
    ],
    challengeSQLInjection1: [
        "Il s'agit ici d'exploiter une injection SQL pour récupérer le mot de passe haché d'un personnage. La requête faite à la base de données PostgreSQL pour accéder au détail d'un personnage est très simple, et peut facilement être devinée.",
        "La colonne de la table PostgreSQL 'characters' contenant le mot de passe haché s'intitule 'hashedPassword'. Il existe plusieurs moyens de détourner une requête SQL, comme l'opérateur UNION.",
    ],
    challengeLowEncryption1: [
        "Le mot de passe est haché à l'aide de la fonction md5, depuis quelque temps dépréciée car peu sécurisée. Le mot de passe est suffisamment court pour être cracké rapidement.",
        "Vous pouvez tenter vous-même de trouver le mot de passe par force brute. En réalité, pour les mots de passe hashés avec la fonction md5, des tables de correspondances (aussi appelées rainbow tables) existent sur Internet et vous permettront d'obtenir le flag sans trop vous fatiguer."
    ],
}