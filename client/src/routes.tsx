import { challenges } from "./challenges"
import { ChallengeList, ChallengeSQLInjection1Character, ChallengeXSS1SetAdminCookie, Login, Unknown } from './pages'

export { routes }

export type { routeType }

type authorizationType = "admin" | "user" | "unknown"

type routeType = { getPath: (params?: Record<string, string>) => string, component: JSX.Element, authorization: authorizationType }

const routes: Record<string, routeType> = {
    ...challenges.reduce((acc, challenge) => ({
        ...acc, [challenge.name]: {
            authorization: "user",
            getPath: () => challenge.path,
            component: challenge.component
        }
    }), {} as Record<string, routeType>),
    "client/*": { authorization: "unknown", getPath: () => "/client/*", component: <Unknown /> },
    "challengeXSS1-set-admin-cookies": {
        authorization: "admin",
        getPath: () => "/client/challengeXSS1-set-admin-cookies", component: <ChallengeXSS1SetAdminCookie />
    },
    "character": {
        authorization: "user",
        getPath: (params) => "/client/challengeSQLInjection1/characters/" + (params ? params["id"] : ":id"),
        component: <ChallengeSQLInjection1Character />
    },
    "challenge-list": {
        authorization: "user",
        getPath: () => "/client/challenge-list",
        component: <ChallengeList />
    },
    "login": {
        authorization: "unknown",
        getPath: () => "/client/login",
        component: <Login />
    },
}