import { useEffect } from 'react';
import { BrowserRouter, Navigate, Route, Routes, useNavigate } from 'react-router-dom';
import { storage } from './services';
import { routes, routeType } from './routes';

export { Router }

function Router() {
    const hasUserName = !!storage.user.getUserName();
    return <BrowserRouter>
        <Routes>
            {Object.entries(routes).map(([routeName, route]) => <Route key={routeName} path={route.getPath()} element={<AuthenticatedComponent route={route} />} />)}
            <Route path="/client" element={<Navigate to={hasUserName ? routes["challenge-list"].getPath() : routes["login"].getPath()} />} />
        </Routes>
    </BrowserRouter>
}

function AuthenticatedComponent(props: { route: routeType }) {
    const navigate = useNavigate();
    const userName = storage.user.getUserName();

    useEffect(() => {
        switch (props.route.authorization) {
            case "admin":
                if (userName !== "admin") {
                    navigate(routes["login"].getPath())
                    return;
                }
                break;
            case "user":
                if (!userName) {
                    navigate(routes["login"].getPath());
                    return;
                }
                break;
        }

    }, [userName])
    return props.route.component;
}